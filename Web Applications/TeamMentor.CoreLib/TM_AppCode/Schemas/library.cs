//O2Ref:O2_Misc_Microsoft_MPL_Libs.dll
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5446
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace urn.microsoft.guidanceexplorer {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Linq;
    using Xml.Schema.Linq;
    
    
    /// <summary>
    /// <para>
    /// Regular expression: (library | userViews | librariesColumns | globalViews)
    /// </para>
    /// </summary>
    public partial class guidanceExplorer : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator guidanceExplorer(XElement xe) { return XTypedServices.ToXTypedElement<guidanceExplorer>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static guidanceExplorer() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(XName.Get("library", "urn:microsoft:guidanceexplorer")), new NamedContentModelEntity(XName.Get("userViews", "urn:microsoft:guidanceexplorer")), new NamedContentModelEntity(XName.Get("librariesColumns", "urn:microsoft:guidanceexplorer")), new NamedContentModelEntity(XName.Get("globalViews", "urn:microsoft:guidanceexplorer")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (library | userViews | librariesColumns | globalViews)
        /// </para>
        /// </summary>
        public guidanceExplorer() {
        }
        
        public guidanceExplorer(Library library) {
            this.library = library;
        }
        
        public guidanceExplorer(UserViews userViews) {
            this.userViews = userViews;
        }
        
        public guidanceExplorer(Columns librariesColumns) {
            this.librariesColumns = librariesColumns;
        }
        
        public guidanceExplorer(GlobalViews globalViews) {
            this.globalViews = globalViews;
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (library | userViews | librariesColumns | globalViews)
        /// </para>
        /// </summary>
        public Library library {
            get {
                XElement x = this.GetElement(XName.Get("library", "urn:microsoft:guidanceexplorer"));
                return ((Library)(x));
            }
            set {
                this.SetElement(XName.Get("library", "urn:microsoft:guidanceexplorer"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (library | userViews | librariesColumns | globalViews)
        /// </para>
        /// </summary>
        public UserViews userViews {
            get {
                XElement x = this.GetElement(XName.Get("userViews", "urn:microsoft:guidanceexplorer"));
                return ((UserViews)(x));
            }
            set {
                this.SetElement(XName.Get("userViews", "urn:microsoft:guidanceexplorer"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (library | userViews | librariesColumns | globalViews)
        /// </para>
        /// </summary>
        public Columns librariesColumns {
            get {
                XElement x = this.GetElement(XName.Get("librariesColumns", "urn:microsoft:guidanceexplorer"));
                return ((Columns)(x));
            }
            set {
                this.SetElement(XName.Get("librariesColumns", "urn:microsoft:guidanceexplorer"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (library | userViews | librariesColumns | globalViews)
        /// </para>
        /// </summary>
        public GlobalViews globalViews {
            get {
                XElement x = this.GetElement(XName.Get("globalViews", "urn:microsoft:guidanceexplorer"));
                return ((GlobalViews)(x));
            }
            set {
                this.SetElement(XName.Get("globalViews", "urn:microsoft:guidanceexplorer"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("guidanceExplorer", "urn:microsoft:guidanceexplorer");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static guidanceExplorer Load(string xmlFile) {
            return XTypedServices.Load<guidanceExplorer>(xmlFile);
        }
        
        public static guidanceExplorer Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<guidanceExplorer>(xmlFile);
        }
        
        public static guidanceExplorer Parse(string xml) {
            return XTypedServices.Parse<guidanceExplorer>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<guidanceExplorer>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("library", "urn:microsoft:guidanceexplorer"), typeof(Library));
            localElementDictionary.Add(XName.Get("userViews", "urn:microsoft:guidanceexplorer"), typeof(UserViews));
            localElementDictionary.Add(XName.Get("librariesColumns", "urn:microsoft:guidanceexplorer"), typeof(Columns));
            localElementDictionary.Add(XName.Get("globalViews", "urn:microsoft:guidanceexplorer"), typeof(GlobalViews));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (libraryStructure, items, columns?)
    /// </para>
    /// </summary>
    public partial class Library : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator Library(XElement xe) { return XTypedServices.ToXTypedElement<Library>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Library() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("libraryStructure", "urn:microsoft:guidanceexplorer")), new NamedContentModelEntity(XName.Get("items", "urn:microsoft:guidanceexplorer")), new NamedContentModelEntity(XName.Get("columns", "urn:microsoft:guidanceexplorer")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (libraryStructure, items, columns?)
        /// </para>
        /// </summary>
        public Library() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (libraryStructure, items, columns?)
        /// </para>
        /// </summary>
        public LibraryStructure libraryStructure {
            get {
                XElement x = this.GetElement(XName.Get("libraryStructure", "urn:microsoft:guidanceexplorer"));
                return ((LibraryStructure)(x));
            }
            set {
                this.SetElement(XName.Get("libraryStructure", "urn:microsoft:guidanceexplorer"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (libraryStructure, items, columns?)
        /// </para>
        /// </summary>
        public Items items {
            get {
                XElement x = this.GetElement(XName.Get("items", "urn:microsoft:guidanceexplorer"));
                return ((Items)(x));
            }
            set {
                this.SetElement(XName.Get("items", "urn:microsoft:guidanceexplorer"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (libraryStructure, items, columns?)
        /// </para>
        /// </summary>
        public Columns columns {
            get {
                XElement x = this.GetElement(XName.Get("columns", "urn:microsoft:guidanceexplorer"));
                return ((Columns)(x));
            }
            set {
                this.SetElement(XName.Get("columns", "urn:microsoft:guidanceexplorer"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string caption {
            get {
                XAttribute x = this.Attribute(XName.Get("caption", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("caption", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string readProtection {
            get {
                XAttribute x = this.Attribute(XName.Get("readProtection", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("readProtection", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string name {
            get {
                XAttribute x = this.Attribute(XName.Get("name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> suscribed {
            get {
                XAttribute x = this.Attribute(XName.Get("suscribed", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("suscribed", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string originalSource {
            get {
                XAttribute x = this.Attribute(XName.Get("originalSource", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("originalSource", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> webSuscribed {
            get {
                XAttribute x = this.Attribute(XName.Get("webSuscribed", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("webSuscribed", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string url {
            get {
                XAttribute x = this.Attribute(XName.Get("url", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("url", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Library", "urn:microsoft:guidanceexplorer");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Library>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("libraryStructure", "urn:microsoft:guidanceexplorer"), typeof(LibraryStructure));
            localElementDictionary.Add(XName.Get("items", "urn:microsoft:guidanceexplorer"), typeof(Items));
            localElementDictionary.Add(XName.Get("columns", "urn:microsoft:guidanceexplorer"), typeof(Columns));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (folder*, (view* | searchView*)*)
    /// </para>
    /// </summary>
    public partial class LibraryStructure : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Folder> folderField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<View> viewField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SearchView> searchViewField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator LibraryStructure(XElement xe) { return XTypedServices.ToXTypedElement<LibraryStructure>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static LibraryStructure() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (folder*, (view* | searchView*)*)
        /// </para>
        /// </summary>
        public LibraryStructure() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (folder*, (view* | searchView*)*)
        /// </para>
        /// </summary>
        public IList<Folder> folder {
            get {
                if ((this.folderField == null)) {
                    this.folderField = new XTypedList<Folder>(this, LinqToXsdTypeManager.Instance, XName.Get("folder", "urn:microsoft:guidanceexplorer"));
                }
                return this.folderField;
            }
            set {
                if ((value == null)) {
                    this.folderField = null;
                }
                else {
                    if ((this.folderField == null)) {
                        this.folderField = XTypedList<Folder>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("folder", "urn:microsoft:guidanceexplorer"));
                    }
                    else {
                        XTypedServices.SetList<Folder>(this.folderField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (folder*, (view* | searchView*)*)
        /// </para>
        /// </summary>
        public IList<View> view {
            get {
                if ((this.viewField == null)) {
                    this.viewField = new XTypedList<View>(this, LinqToXsdTypeManager.Instance, XName.Get("view", "urn:microsoft:guidanceexplorer"));
                }
                return this.viewField;
            }
            set {
                if ((value == null)) {
                    this.viewField = null;
                }
                else {
                    if ((this.viewField == null)) {
                        this.viewField = XTypedList<View>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("view", "urn:microsoft:guidanceexplorer"));
                    }
                    else {
                        XTypedServices.SetList<View>(this.viewField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (folder*, (view* | searchView*)*)
        /// </para>
        /// </summary>
        public IList<SearchView> searchView {
            get {
                if ((this.searchViewField == null)) {
                    this.searchViewField = new XTypedList<SearchView>(this, LinqToXsdTypeManager.Instance, XName.Get("searchView", "urn:microsoft:guidanceexplorer"));
                }
                return this.searchViewField;
            }
            set {
                if ((value == null)) {
                    this.searchViewField = null;
                }
                else {
                    if ((this.searchViewField == null)) {
                        this.searchViewField = XTypedList<SearchView>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("searchView", "urn:microsoft:guidanceexplorer"));
                    }
                    else {
                        XTypedServices.SetList<SearchView>(this.searchViewField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("LibraryStructure", "urn:microsoft:guidanceexplorer");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<LibraryStructure>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("folder", "urn:microsoft:guidanceexplorer"), typeof(Folder));
            localElementDictionary.Add(XName.Get("view", "urn:microsoft:guidanceexplorer"), typeof(View));
            localElementDictionary.Add(XName.Get("searchView", "urn:microsoft:guidanceexplorer"), typeof(SearchView));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (columns, (folder1* | view* | searchView*)*)
    /// </para>
    /// </summary>
    public partial class Folder : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Folder> folder1Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<View> viewField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SearchView> searchViewField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator Folder(XElement xe) { return XTypedServices.ToXTypedElement<Folder>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Folder() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (columns, (folder1* | view* | searchView*)*)
        /// </para>
        /// </summary>
        public Folder() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (columns, (folder1* | view* | searchView*)*)
        /// </para>
        /// </summary>
        public Columns columns {
            get {
                XElement x = this.GetElement(XName.Get("columns", "urn:microsoft:guidanceexplorer"));
                return ((Columns)(x));
            }
            set {
                this.SetElement(XName.Get("columns", "urn:microsoft:guidanceexplorer"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (columns, (folder1* | view* | searchView*)*)
        /// </para>
        /// </summary>
        public IList<Folder> folder1 {
            get {
                if ((this.folder1Field == null)) {
                    this.folder1Field = new XTypedList<Folder>(this, LinqToXsdTypeManager.Instance, XName.Get("folder", "urn:microsoft:guidanceexplorer"));
                }
                return this.folder1Field;
            }
            set {
                if ((value == null)) {
                    this.folder1Field = null;
                }
                else {
                    if ((this.folder1Field == null)) {
                        this.folder1Field = XTypedList<Folder>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("folder", "urn:microsoft:guidanceexplorer"));
                    }
                    else {
                        XTypedServices.SetList<Folder>(this.folder1Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (columns, (folder1* | view* | searchView*)*)
        /// </para>
        /// </summary>
        public IList<View> view {
            get {
                if ((this.viewField == null)) {
                    this.viewField = new XTypedList<View>(this, LinqToXsdTypeManager.Instance, XName.Get("view", "urn:microsoft:guidanceexplorer"));
                }
                return this.viewField;
            }
            set {
                if ((value == null)) {
                    this.viewField = null;
                }
                else {
                    if ((this.viewField == null)) {
                        this.viewField = XTypedList<View>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("view", "urn:microsoft:guidanceexplorer"));
                    }
                    else {
                        XTypedServices.SetList<View>(this.viewField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (columns, (folder1* | view* | searchView*)*)
        /// </para>
        /// </summary>
        public IList<SearchView> searchView {
            get {
                if ((this.searchViewField == null)) {
                    this.searchViewField = new XTypedList<SearchView>(this, LinqToXsdTypeManager.Instance, XName.Get("searchView", "urn:microsoft:guidanceexplorer"));
                }
                return this.searchViewField;
            }
            set {
                if ((value == null)) {
                    this.searchViewField = null;
                }
                else {
                    if ((this.searchViewField == null)) {
                        this.searchViewField = XTypedList<SearchView>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("searchView", "urn:microsoft:guidanceexplorer"));
                    }
                    else {
                        XTypedServices.SetList<SearchView>(this.searchViewField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string caption {
            get {
                XAttribute x = this.Attribute(XName.Get("caption", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("caption", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
		//DC: new one added to hold the folderId
		public string folderId {
            get {
                XAttribute x = this.Attribute(XName.Get("folderId", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("folderId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
		
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Folder", "urn:microsoft:guidanceexplorer");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Folder>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("columns", "urn:microsoft:guidanceexplorer"), typeof(Columns));
            localElementDictionary.Add(XName.Get("folder", "urn:microsoft:guidanceexplorer"), typeof(Folder));
            localElementDictionary.Add(XName.Get("view", "urn:microsoft:guidanceexplorer"), typeof(View));
            localElementDictionary.Add(XName.Get("searchView", "urn:microsoft:guidanceexplorer"), typeof(SearchView));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (columns, items)
    /// </para>
    /// </summary>
    public partial class View : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator View(XElement xe) { return XTypedServices.ToXTypedElement<View>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static View() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("columns", "urn:microsoft:guidanceexplorer")), new NamedContentModelEntity(XName.Get("items", "urn:microsoft:guidanceexplorer")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (columns, items)
        /// </para>
        /// </summary>
        public View() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (columns, items)
        /// </para>
        /// </summary>
        public Columns columns {
            get {
                XElement x = this.GetElement(XName.Get("columns", "urn:microsoft:guidanceexplorer"));
                return ((Columns)(x));
            }
            set {
                this.SetElement(XName.Get("columns", "urn:microsoft:guidanceexplorer"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (columns, items)
        /// </para>
        /// </summary>
        public Items items {
            get {
                XElement x = this.GetElement(XName.Get("items", "urn:microsoft:guidanceexplorer"));
                return ((Items)(x));
            }
            set {
                this.SetElement(XName.Get("items", "urn:microsoft:guidanceexplorer"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string caption {
            get {
                XAttribute x = this.Attribute(XName.Get("caption", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("caption", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string author {
            get {
                XAttribute x = this.Attribute(XName.Get("author", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("author", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string description {
            get {
                XAttribute x = this.Attribute(XName.Get("description", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("description", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<System.DateTime> creationDate {
            get {
                XAttribute x = this.Attribute(XName.Get("creationDate", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("creationDate", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string id {
            get {
                XAttribute x = this.Attribute(XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> rootView {
            get {
                XAttribute x = this.Attribute(XName.Get("rootView", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("rootView", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("View", "urn:microsoft:guidanceexplorer");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<View>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("columns", "urn:microsoft:guidanceexplorer"), typeof(Columns));
            localElementDictionary.Add(XName.Get("items", "urn:microsoft:guidanceexplorer"), typeof(Items));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (columns, criteria)
    /// </para>
    /// </summary>
    public partial class SearchView : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator SearchView(XElement xe) { return XTypedServices.ToXTypedElement<SearchView>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SearchView() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("columns", "urn:microsoft:guidanceexplorer")), new NamedContentModelEntity(XName.Get("criteria", "urn:microsoft:guidanceexplorer")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (columns, criteria)
        /// </para>
        /// </summary>
        public SearchView() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (columns, criteria)
        /// </para>
        /// </summary>
        public Columns columns {
            get {
                XElement x = this.GetElement(XName.Get("columns", "urn:microsoft:guidanceexplorer"));
                return ((Columns)(x));
            }
            set {
                this.SetElement(XName.Get("columns", "urn:microsoft:guidanceexplorer"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (columns, criteria)
        /// </para>
        /// </summary>
        public XTypedElement criteria {
            get {
                XElement x = this.GetElement(XName.Get("criteria", "urn:microsoft:guidanceexplorer"));
                return ((XTypedElement)(x));
            }
            set {
                this.SetElement(XName.Get("criteria", "urn:microsoft:guidanceexplorer"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string caption {
            get {
                XAttribute x = this.Attribute(XName.Get("caption", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("caption", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string author {
            get {
                XAttribute x = this.Attribute(XName.Get("author", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("author", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string description {
            get {
                XAttribute x = this.Attribute(XName.Get("description", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("description", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<System.DateTime> creationDate {
            get {
                XAttribute x = this.Attribute(XName.Get("creationDate", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("creationDate", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string containerScope {
            get {
                XAttribute x = this.Attribute(XName.Get("containerScope", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("containerScope", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string containerScopeType {
            get {
                XAttribute x = this.Attribute(XName.Get("containerScopeType", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("containerScopeType", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> rootView {
            get {
                XAttribute x = this.Attribute(XName.Get("rootView", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("rootView", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string id {
            get {
                XAttribute x = this.Attribute(XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("SearchView", "urn:microsoft:guidanceexplorer");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SearchView>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("columns", "urn:microsoft:guidanceexplorer"), typeof(Columns));
            localElementDictionary.Add(XName.Get("criteria", "urn:microsoft:guidanceexplorer"), typeof(XTypedElement));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (item*)
    /// </para>
    /// </summary>
    public partial class Items : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> itemField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator Items(XElement xe) { return XTypedServices.ToXTypedElement<Items>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Items() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("item", "urn:microsoft:guidanceexplorer")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (item*)
        /// </para>
        /// </summary>
        public Items() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (item*)
        /// </para>
        /// </summary>
        public IList<string> item {
            get {
                if ((this.itemField == null)) {
                    this.itemField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("item", "urn:microsoft:guidanceexplorer"));
                }
                return this.itemField;
            }
            set {
                if ((value == null)) {
                    this.itemField = null;
                }
                else {
                    if ((this.itemField == null)) {
                        this.itemField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("item", "urn:microsoft:guidanceexplorer"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.itemField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Items", "urn:microsoft:guidanceexplorer");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Items>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("item", "urn:microsoft:guidanceexplorer"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class Column : XTypedElement, IXMetaData {
        
         public static explicit operator Column(XElement xe) { return XTypedServices.ToXTypedElement<Column>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public Column() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string source {
            get {
                XAttribute x = this.Attribute(XName.Get("source", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("source", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string caption {
            get {
                XAttribute x = this.Attribute(XName.Get("caption", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("caption", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string sort {
            get {
                XAttribute x = this.Attribute(XName.Get("sort", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("sort", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string width {
            get {
                XAttribute x = this.Attribute(XName.Get("width", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("width", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> visible {
            get {
                XAttribute x = this.Attribute(XName.Get("visible", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("visible", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string position {
            get {
                XAttribute x = this.Attribute(XName.Get("position", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("position", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string filter {
            get {
                XAttribute x = this.Attribute(XName.Get("filter", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("filter", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Column", "urn:microsoft:guidanceexplorer");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Column>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (column*)
    /// </para>
    /// </summary>
    public partial class Columns : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Column> columnField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator Columns(XElement xe) { return XTypedServices.ToXTypedElement<Columns>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Columns() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("column", "urn:microsoft:guidanceexplorer")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (column*)
        /// </para>
        /// </summary>
        public Columns() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (column*)
        /// </para>
        /// </summary>
        public IList<Column> column {
            get {
                if ((this.columnField == null)) {
                    this.columnField = new XTypedList<Column>(this, LinqToXsdTypeManager.Instance, XName.Get("column", "urn:microsoft:guidanceexplorer"));
                }
                return this.columnField;
            }
            set {
                if ((value == null)) {
                    this.columnField = null;
                }
                else {
                    if ((this.columnField == null)) {
                        this.columnField = XTypedList<Column>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("column", "urn:microsoft:guidanceexplorer"));
                    }
                    else {
                        XTypedServices.SetList<Column>(this.columnField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Columns", "urn:microsoft:guidanceexplorer");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Columns>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("column", "urn:microsoft:guidanceexplorer"), typeof(Column));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (columns?, structure)
    /// </para>
    /// </summary>
    public partial class UserViews : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator UserViews(XElement xe) { return XTypedServices.ToXTypedElement<UserViews>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static UserViews() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("columns", "urn:microsoft:guidanceexplorer")), new NamedContentModelEntity(XName.Get("structure", "urn:microsoft:guidanceexplorer")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (columns?, structure)
        /// </para>
        /// </summary>
        public UserViews() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (columns?, structure)
        /// </para>
        /// </summary>
        public Columns columns {
            get {
                XElement x = this.GetElement(XName.Get("columns", "urn:microsoft:guidanceexplorer"));
                return ((Columns)(x));
            }
            set {
                this.SetElement(XName.Get("columns", "urn:microsoft:guidanceexplorer"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (columns?, structure)
        /// </para>
        /// </summary>
        public LibraryStructure structure {
            get {
                XElement x = this.GetElement(XName.Get("structure", "urn:microsoft:guidanceexplorer"));
                return ((LibraryStructure)(x));
            }
            set {
                this.SetElement(XName.Get("structure", "urn:microsoft:guidanceexplorer"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("UserViews", "urn:microsoft:guidanceexplorer");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<UserViews>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("columns", "urn:microsoft:guidanceexplorer"), typeof(Columns));
            localElementDictionary.Add(XName.Get("structure", "urn:microsoft:guidanceexplorer"), typeof(LibraryStructure));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (columns?, structure)
    /// </para>
    /// </summary>
    public partial class GlobalViews : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator GlobalViews(XElement xe) { return XTypedServices.ToXTypedElement<GlobalViews>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GlobalViews() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("columns", "urn:microsoft:guidanceexplorer")), new NamedContentModelEntity(XName.Get("structure", "urn:microsoft:guidanceexplorer")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (columns?, structure)
        /// </para>
        /// </summary>
        public GlobalViews() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (columns?, structure)
        /// </para>
        /// </summary>
        public Columns columns {
            get {
                XElement x = this.GetElement(XName.Get("columns", "urn:microsoft:guidanceexplorer"));
                return ((Columns)(x));
            }
            set {
                this.SetElement(XName.Get("columns", "urn:microsoft:guidanceexplorer"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (columns?, structure)
        /// </para>
        /// </summary>
        public LibraryStructure structure {
            get {
                XElement x = this.GetElement(XName.Get("structure", "urn:microsoft:guidanceexplorer"));
                return ((LibraryStructure)(x));
            }
            set {
                this.SetElement(XName.Get("structure", "urn:microsoft:guidanceexplorer"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("GlobalViews", "urn:microsoft:guidanceexplorer");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GlobalViews>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("columns", "urn:microsoft:guidanceexplorer"), typeof(Columns));
            localElementDictionary.Add(XName.Get("structure", "urn:microsoft:guidanceexplorer"), typeof(LibraryStructure));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public class LinqToXsdTypeManager : ILinqToXsdTypeManager {
        
        static Dictionary<XName, System.Type> typeDictionary = new Dictionary<XName, System.Type>();
        
        static Dictionary<XName, System.Type> elementDictionary = new Dictionary<XName, System.Type>();
        
        private static XmlSchemaSet schemaSet;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static LinqToXsdTypeManager typeManagerSingleton = new LinqToXsdTypeManager();
        
        static LinqToXsdTypeManager() {
            BuildTypeDictionary();
            BuildElementDictionary();
        }
        
        XmlSchemaSet ILinqToXsdTypeManager.Schemas {
            get {
                if ((schemaSet == null)) {
                    XmlSchemaSet tempSet = new XmlSchemaSet();
                    System.Threading.Interlocked.CompareExchange(ref schemaSet, tempSet, null);
                }
                return schemaSet;
            }
            set {
                schemaSet = value;
            }
        }
        
        Dictionary<XName, System.Type> ILinqToXsdTypeManager.GlobalTypeDictionary {
            get {
                return typeDictionary;
            }
        }
        
        Dictionary<XName, System.Type> ILinqToXsdTypeManager.GlobalElementDictionary {
            get {
                return elementDictionary;
            }
        }
        
        Dictionary<System.Type, System.Type> ILinqToXsdTypeManager.RootContentTypeMapping {
            get {
                return XTypedServices.EmptyTypeMappingDictionary;
            }
        }
        
        public static LinqToXsdTypeManager Instance {
            get {
                return typeManagerSingleton;
            }
        }
        
        private static void BuildTypeDictionary() {
            typeDictionary.Add(XName.Get("Library", "urn:microsoft:guidanceexplorer"), typeof(global::urn.microsoft.guidanceexplorer.Library));
            typeDictionary.Add(XName.Get("LibraryStructure", "urn:microsoft:guidanceexplorer"), typeof(global::urn.microsoft.guidanceexplorer.LibraryStructure));
            typeDictionary.Add(XName.Get("Folder", "urn:microsoft:guidanceexplorer"), typeof(global::urn.microsoft.guidanceexplorer.Folder));
            typeDictionary.Add(XName.Get("View", "urn:microsoft:guidanceexplorer"), typeof(global::urn.microsoft.guidanceexplorer.View));
            typeDictionary.Add(XName.Get("SearchView", "urn:microsoft:guidanceexplorer"), typeof(global::urn.microsoft.guidanceexplorer.SearchView));
            typeDictionary.Add(XName.Get("Items", "urn:microsoft:guidanceexplorer"), typeof(global::urn.microsoft.guidanceexplorer.Items));
            typeDictionary.Add(XName.Get("Column", "urn:microsoft:guidanceexplorer"), typeof(global::urn.microsoft.guidanceexplorer.Column));
            typeDictionary.Add(XName.Get("Columns", "urn:microsoft:guidanceexplorer"), typeof(global::urn.microsoft.guidanceexplorer.Columns));
            typeDictionary.Add(XName.Get("UserViews", "urn:microsoft:guidanceexplorer"), typeof(global::urn.microsoft.guidanceexplorer.UserViews));
            typeDictionary.Add(XName.Get("GlobalViews", "urn:microsoft:guidanceexplorer"), typeof(global::urn.microsoft.guidanceexplorer.GlobalViews));
        }
        
        private static void BuildElementDictionary() {
            elementDictionary.Add(XName.Get("guidanceExplorer", "urn:microsoft:guidanceexplorer"), typeof(global::urn.microsoft.guidanceexplorer.guidanceExplorer));
        }
        
        protected internal static void AddSchemas(XmlSchemaSet schemas) {
            schemas.Add(schemaSet);
        }
        
        public static System.Type GetRootType() {
            return elementDictionary[XName.Get("guidanceExplorer", "urn:microsoft:guidanceexplorer")];
        }
    }
    
    public partial class XRootNamespace {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

    public guidanceExplorer guidanceExplorer {  get {return rootObject as guidanceExplorer; } }
        
        private XRootNamespace() {
        }
        
        public XRootNamespace(guidanceExplorer root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public static XRootNamespace Load(string xmlFile) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(string xmlFile, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(XmlReader xmlReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
    
    public partial class XRoot {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

    public global::urn.microsoft.guidanceexplorer.guidanceExplorer guidanceExplorer {  get {return rootObject as global::urn.microsoft.guidanceexplorer.guidanceExplorer; } }
        
        private XRoot() {
        }
        
        public XRoot(global::urn.microsoft.guidanceexplorer.guidanceExplorer root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public static XRoot Load(string xmlFile) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(string xmlFile, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(XmlReader xmlReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
}
