<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>00000000-0000-0000-0000-0000008fe94a</Id>
    <Library_Id>f798e6e6-1732-4172-9c47-9621d914efcd</Library_Id>
    <Title>Integrate Encryption into the System</Title>
    <Category>Cryptography</Category>
    <Phase>Design</Phase>
    <Technology> Any</Technology>
    <Type>Guideline</Type>
    <DirectLink>Integrate Encryption into the System</DirectLink>
    <Author />
    <Priority />
    <Status />
  </Metadata>
  <Content Sanitized="false" DataType="html">
    <Data><![CDATA[<h2>What to Do</h2>
  <p>Ensure that encryption is properly integrated into the system design, including but not necessarily limited to:</p>
  <ul>
    <li>Encryption that is needed to store or transmit private data of the users of the system</li>
    <li>Encryption that is needed to protect the system itself from unauthorized disclosure or tampering</li>
  </ul>
  <h2>How</h2>
  <p>To integrate encryption into the system:</p>
  <ol>
    <li>
      <p>
        <strong>Identify sensitive data.</strong> Clearly specify which data or resources are valuable enough that they should be protected by encryption. Require that any transmission or storage of this data/resource should use well-vetted encryption algorithms.
 Use naming conventions and strong types to make it easier to spot when sensitive data is being used. When creating structures, objects, or other complex entities, separate the sensitive and non-sensitive data as much as possible.</p>
    </li>
    <li>
      <p>
        <strong>Identify where to use encryption.</strong> Using threat modeling or other techniques, assume that your data can be compromised through a separate vulnerability or weakness, and determine where encryption will be most effective. Ensure that data you
 believe should be private is not being inadvertently exposed using weaknesses such as insecure permissions (CWE-732).</p>
    </li>
    <li>
      <p>
        <strong>Identify encryption requirements.</strong> Identify the separate needs and contexts for encryption:</p>
      <ul>
        <li>
          <p>
            <strong>One-way</strong> (i.e., only the user or recipient needs to have the key). This can be achieved using public key cryptography, or other techniques in which the encrypting party (i.e., the software) does not need to have access to a private key.</p>
        </li>
        <li>
          <p>
            <strong>Two-way</strong> (i.e., the encryption can be automatically performed on behalf of a user, but the key must be available so that the plaintext can be automatically recoverable by that user). This requires storage of the private key in a format that
 is recoverable only by the user (or perhaps by the operating system) in a way that cannot be recovered by others.</p>
        </li>
      </ul>
    </li>
    <li>
      <p>
        <strong>Use strong encryption algorithms.</strong> Select a well-vetted algorithm that is currently considered to be strong by experts in the field, and select well-tested implementations. As with all cryptographic mechanisms, the source code should be available
 for analysis. For example, US government systems require FIPS 140-2 certification. Periodically ensure that you aren't using obsolete cryptography. Some older algorithms, once thought to require a billion years of computing time, can now be broken in days
 or hours. This includes MD4, MD5, SHA1, DES, and other algorithms that were once regarded as strong. When you use industry-approved techniques, you need to use them correctly. Don't cut corners by skipping resource-intensive steps (CWE-325). These steps are
 often essential for preventing common attacks.</p>
    </li>
    <li>
      <p>
        <strong>Do not develop your own cryptographic algorithms. </strong>They will likely be exposed to attacks that are well-understood by cryptographers. Reverse engineering techniques are mature. If your algorithm can be compromised if attackers find out how
 it works, then it is especially weak.</p>
    </li>
    <li>
      <p>
        <strong>Compartmentalize the system.</strong> Compartmentalize your system to have "safe" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with
 a compartment outside of the safe area.</p>
    </li>
  </ol>
  <h2>Additional Resources</h2>
  <ul>
    <li>For more information about "CWE-732: Incorrect Permission Assignment for Critical Resource", please see
<a href="http://cwe.mitre.org/data/definitions/732.html">http://cwe.mitre.org/data/definitions/732.html</a></li>
    <li>For more information about "CWE-325: Missing Required Cryptographic Step", please see
<a href="http://cwe.mitre.org/data/definitions/325.html">http://cwe.mitre.org/data/definitions/325.html</a></li>
  </ul>]]></Data>
  </Content>
</TeamMentor_Article>