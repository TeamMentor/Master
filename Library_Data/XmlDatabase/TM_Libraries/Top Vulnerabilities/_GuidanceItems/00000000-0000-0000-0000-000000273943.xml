<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>00000000-0000-0000-0000-000000273943</Id>
    <Library_Id>f798e6e6-1732-4172-9c47-9621d914efcd</Library_Id>
    <Title>Input Validation Using JSF</Title>
    <Category>Validation</Category>
    <Phase>Implementation</Phase>
    <Technology>JSF</Technology>
    <Type>Code Example</Type>
    <DirectLink>Input Validation Using JSF</DirectLink>
    <Author />
    <Priority />
    <Status />
  </Metadata>
  <Content Sanitized="false" DataType="html">
    <Data><![CDATA[<h1>Applies to</h1>
  <ul>
    <li>JAVA</li>
    <li>JSF</li>
  </ul>
  <h1>Summary</h1>
  <p>Perform input validation using JSF within an application.</p>
  <h1>Objectives</h1>
  <p>Strong input validation is a powerful control that can prevent various security issues within an application. This article will describe how to use the built-in mechanisms provided by JSF to perform appropriate input validation.</p>
  <h1>Solution Examples</h1>
  <p>There are several ways to perform input validation using JSF depending on the needed validation. </p>
  <ol>
    <li>
      <p>
        <strong>Using the required attribute on form elements.</strong> For most form elements in JSF, you can simply add the <em>required="true"</em> attribute to ensure that the field has a value when submitted. This is a trivial, but very common, validation and is easy to handle in JSF.</p>
      <pre>&lt;h:inputText value="#{myBean.someField}" required="true"/&gt;</pre>
    </li>
    <li>
      <p>
        <strong>Use built-in validators.</strong> This mechanism allows you to add validation directly within the field of the form you are validating using any of the many built-in validators. </p>
      <pre>&lt;h:inputText value="#{myBean.someField}" required="true"&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;f:validateLength minimum="6" maximum="50"/&gt;<br />&lt;/h:inputText&gt;</pre>
    </li>
    <li>
      <p>
        <strong>Use custom method from backing bean to perform validation.</strong> This option simply provides you with a mechanism to build out a method that checks the given field and throw a <em>ValidatorException</em> if necessary. This is completely custom code, but JSF does provide a hook to access custom validation methods by using the validator attribute as shown below.</p>
      <pre>&lt;h:inputText value="#{myBean.myField}" validator="#{myBean.validateMyField}" /&gt;</pre>
    </li>
    <li>
      <p>
        <strong>Build a custom validator by implementing <em>Validator</em> interface.</strong> If you have a validation that could be reusable but does not exist in the standard validations, a custom validator is likely the best option given it's reuse potential. First, you need to build out the validation by creating a class that implements the <em>Validator</em> interface and throws a <em>ValidationException</em> when necessary.</p>
      <pre>javax.faces.validator.Validator<br />....<br />public class MyFieldValidator implements Validator {<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; public void validate(FacesContext context, UIComponent component, Object value)<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;throws ValidatorException {</pre>
      <pre>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; String myField = (String) value;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if(!myField.contains("%")) {<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; FacesMessage message = new FacesMessage();<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; message.setSeverity(FacesMessage.SEVERITY_ERROR);<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; message.setSummary("Invalid format.");<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; message.setDetail("You can't use wildcarding here.");<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; context.addMessage("myForm:MyField", message);<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; throw new ValidatorException(message);<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; }<br />}</pre>
      <p>In order to use a custom validator, you simply register it with JSF by adding something like the below snippet to the <em>faces-config.xml</em> file.</p>
      <pre>&lt;validator&gt;<br />&amp;nbsp;&lt;validator-id&gt;myFieldValidator&lt;/validator-id&gt;<br />&amp;nbsp;&lt;validator-class&gt;com.myapp.MyFieldValidator&lt;/validator-class&gt;<br />&lt;/validator&gt;</pre>
      <p>Finally, you would add the validator to a given field in a form similar to how you would use one of the built-in validators.</p>
      <pre>&lt;h:inputText id="MyField" value="#{myBean.myField}"&gt;<br />&amp;nbsp;&lt;f:validator validatorId="myFieldValidator" /&gt;<br />&lt;/h:inputText&gt;</pre>
      <p>For any of the validation mechanisms listed above, there is a common UI pattern for displaying the error messages back to the user. You can use the <em>h:messages</em> or <em>h:message</em> tag</p>
      <pre>//for displaying all messages<br />&lt;h:messages /&gt;</pre>
      <pre>//for displaying messages for a single input field<br />&lt;h:message for="userName" /&gt;</pre>
    </li>
  </ol>
  <p>In conclusion, input validation can function as a strong security control if used properly and applied thoroughly throughout the application. The JSF framework provides several options for accomplishing this task.</p>
  <h1>More Information</h1>
  <ul>
    <li>For more information about input validation in JSF, please see <a href="http://courses.coreservlets.com/Course-Materials/pdf/jsf/08-Validation.pdf">http://courses.coreservlets.com/Course-Materials/pdf/jsf/08-Validation.pdf</a></li>
    <li>For more information about&amp;nbsp;data conversion and validation in JSF, please see&amp;nbsp;<a href="http://www.ibm.com/developerworks/java/library/j-jsf3/">http://www.ibm.com/developerworks/java/library/j-jsf3/</a></li>
  </ul>
  <ul>
  </ul>]]></Data>
  </Content>
</TeamMentor_Article>