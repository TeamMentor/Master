<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>00000000-0000-0000-0000-000000162cda</Id>
    <Library_Id>f798e6e6-1732-4172-9c47-9621d914efcd</Library_Id>
    <Title>Encode Echoed Input</Title>
    <Category>Encoding</Category>
    <Phase>Implementation</Phase>
    <Technology>ASP.NET</Technology>
    <Type>Guideline</Type>
    <DirectLink>Encode Echoed Input</DirectLink>
    <Author />
    <Priority />
    <Status />
  </Metadata>
  <Content Sanitized="false" DataType="html">
    <Data><![CDATA[<h1>Applies to</h1>
  <ul>
    <li>ASP.NET 4.0</li>
  </ul>
  <h1>What to Do</h1>
  <p>Encode user input displayed on pages.</p>
  <h1>Why</h1>
  <p>Encode user input that is displayed on web pages to prevent Cross-Site Scripting attacks.</p>
  <h1>When</h1>
  <p>Applications should never echo untrusted or user modifiable data back to the user without appropriate encoding. </p>
  <h1>How</h1>
  <p>If you write output that includes user input or data from a shared database or a local file that you do not trust, encode it. Encoding the data ensures that it is treated as literal text and not as script. Use the following guidelines to encode user input:</p>
  <ol>
    <li>
      <p>
        <strong>Do not rely on HtmlEncode.</strong>&amp;nbsp;ASP.NET's Server.HtmlEncode function is often used to protect against cross-site scripting attacks. However, this function only encodes &lt;&gt;"&amp; characters. This is not sufficient to protect against all possible attacks.</p>
    </li>
    <li>
      <p>
        <strong>Encode all special characters.</strong> The safest solution is to encode all non-alphanumeric characters. Only this type of whitelist solution will catch all possible XSS attacks, regardless of context.&amp;nbsp; This&amp;nbsp;requires more overhead in terms of processing time and size of the resulting HTML, but it is the safest encoding mechanism for all HTML contexts:</p>
      <pre>public static string HtmlEncode(string x)<br />{<br />   if (x == null)<br />   {<br />   &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;return x;<br />   }<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;return Regex.Replace(x, "^[a-zA-Z0-9]+$",<br />    new MatchEvaluator(WebUtility.EncodeMatch));<br />}</pre>
    </li>
    <li>
      <p />
      <strong>Use the Microsoft Anti-XSS Library.</strong> If you are using the Anti-Cross Site Scripting Library, you can use the <em>Microsoft.Security.Application.AntiXss.HtmlEncode</em> method.&amp;nbsp;Similarly, if you write URLs that might contain unsafe characters because they have been constructed from input data or data from a shared database, use <em>Microsoft.Security.Application.AntiXss.UrlEncode</em> to make them safe. <p><b>Note: </b>Make sure that you encode data at the last possible opportunity before the data is returned to the client.&amp;nbsp;If you encode any earlier than this, you may not know the exact context that the data will be used in, and hence the format you need to encode into. Also, early encoding of some data can result in double encoding problems.</p></li>
  </ol>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance. </p>]]></Data>
  </Content>
</TeamMentor_Article>