<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>00000000-0000-0000-0000-00000058acc3</Id>
    <Library_Id>f798e6e6-1732-4172-9c47-9621d914efcd</Library_Id>
    <Title>Hash And Salt Passwords</Title>
    <Category>Cryptography</Category>
    <Phase>Implementation</Phase>
    <Technology>PHP</Technology>
    <Type>Guideline</Type>
    <DirectLink>Hash And Salt Passwords</DirectLink>
    <Author />
    <Priority />
    <Status />
  </Metadata>
  <Content Sanitized="false" DataType="html">
    <Data><![CDATA[<h1>Applies to</h1>
  <ul>
    <li>PHP</li>
  </ul>
  <h1>What to Do</h1>
  <p>Hash and salt stored passwords.</p>
  <h1>Why</h1>
  <p>Storing hashes instead of plain-text passwords assures that an attacker cannot easily recover the passwords if he gains access to the password files. Adding salt to hashed files makes hashes much harder to break with dictionary attacks. Hashing should be applied multiple times, because modern computers can perform hashing operations very quickly. </p>
  <h1>When</h1>
  <p>Hash and salt passwords whenever storing them.</p>
  <h1>How</h1>
  <p>Perform the following actions to hash and salt stored passwords:</p>
  <ol>
    <li>
      <p />
      <strong>Generate a random salt value.</strong> Each bit of salt doubles the memory and computational requirements for dictionary attacks. Recommended salt lengths are 64-bit or more. Use a random number generator of your choice to generate a random number of required size. Use this number as the salt. The following example creates a salt 64 characters (256-bit) long:<pre>$salt = hash('sha256', uniqid(mt_rand(), true) . $username);</pre></li>
    <li>
      <p />
      <strong>Concatenate the password and the salt.</strong> Use string functions to concatenate the password and the salt. Make sure your buffer is large enough to store the concatenated string to prevent buffer overflows. For example:<pre>$storedHash = $salt . $password;</pre></li>
    <li>
      <p />
      <strong>Hash the password and the salt.</strong> Use a strong cryptographic hashing algorithm, such as SHA256, to hash the concatenated password and salt. For example:<pre>for ( $i = 0; $i &lt; 50000; $i ++ )<br />{<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; $storedHash = hash('sha256', $storedHash);<br />}</pre></li>
    <li>
      <p>
        <strong>Store the hash and the salt.</strong> Store the hash in the file or database of your choosing. It is important to store both the hash and the salt, because the salt will have to be used when comparing user entered passwords to the hashed value.</p>
    </li>
    <li>
      <p>
        <strong>Implement password verification.</strong> During authentication, the password entered by the user should be checked against the hashed and salted value. To do this, retrieve the hash value and the salt from password storage. Concatenate user input with the stored salt, hash the resulting string and compare the resulting string against the stored hash. If the resulting hash is the same as the stored hash, the user has entered the correct password. In the following example, <em>$userPassword</em> is the user enter password that needs to be validated and<em> $storedHash</em> is the stored salted hash:</p>
      <pre>$salt = substr($storedHash, 0, 64);<br />$validateHash = $salt . $userPassword;<br />for ( $i = 0; $i &lt; 50000; $i ++ )<br />{<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; $validateHash = hash('sha256', $validateHash);<br />}<br />$validateHash = $salt . $validateHash;<br />if ($storedHash == $validateHash)<br />{<br />//The entered password is correct.<br />}<br />else<br />{<br />//The entered password is incorrect.<br />}</pre>
    </li>
  </ol>
  <h1>Additional Resources</h1>
  <ul>
    <li>For more information about password hashing in PHP, please see <a href="http://phpsec.org/articles/2005/password-hashing.html">http://phpsec.org/articles/2005/password-hashing.html</a></li>
  </ul>
  <ul>
  </ul>]]></Data>
  </Content>
</TeamMentor_Article>