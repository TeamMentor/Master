<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>00000000-0000-0000-0000-0000000d099d</Id>
    <Library_Id>f798e6e6-1732-4172-9c47-9621d914efcd</Library_Id>
    <Title>How to Test for Format String Bugs</Title>
    <Category>Dangerous APIs</Category>
    <Phase>Test</Phase>
    <Technology>Native Code</Technology>
    <Type>How To</Type>
    <DirectLink>How to Test for Format String Bugs</DirectLink>
    <Author />
    <Priority />
    <Status />
  </Metadata>
  <Content Sanitized="false" DataType="html">
    <Data><![CDATA[<h1>Applies to</h1>
  <p>Programming languages such C and Perl that use format string functions</p>
  <h1>Summary</h1>
  <p>Programming languages such C and Perl use string functions, like printf(), that allow users to pass a format for the input string.&amp;nbsp; Attackers can manipulate the input parameters passed to these functions to make the function work differently.&amp;nbsp; Attackers can use format string bugs to overwrite parts of the stack, corrupt memory, and crash the system.&amp;nbsp; They can use this vulnerability to execute different kind of attacks such as elevation of privileges, authentication bypass, information disclosure, and denial of services.</p>
  <p>Note that since Perl is interpreted, it doesn't suffer from all the problems present in C.&amp;nbsp; In C the attacker can get execution control of the program similar to buffer overrun attacks.&amp;nbsp; In Perl, on the other hand, the most common attacks are denial of service due to resource consumption, information disclosure, and unwanted modification of variables.</p>
  <p>Below is a summary of steps needed for testing for format string bugs</p>
  <ul>
    <li>
      <b>Step 1</b>:&amp;nbsp; Understand attack scenarios </li>
    <li>
      <b>Step 2</b>:&amp;nbsp; List high risk components<b></b>and<b></b>entry points </li>
    <li>
      <b>Step 3</b>:&amp;nbsp; Start testing and exploring </li>
    <li>
      <b>Step 4</b>:&amp;nbsp; Tune test case data</li>
  </ul>
  <p>
    <b>Step 1:&amp;nbsp; Understand Attack Scenarios</b>
  </p>
  <p>To realize a format string attack the attacker needs to find a vulnerable format string function and gain control of its input.&amp;nbsp; A common attack will look like the following:</p>
  <ol>
    <li>Attacker discovers format string vulnerability </li>
    <li>Attacker modifies input parameters with attack data </li>
    <li>Attacker observes the results</li>
  </ol>
  <p>A common format string bug looks like this:</p>
  <pre>int func (char * buffer)<br />{<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; printf(buffer);<p /><p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return 0;<br />}</p></pre>
  <p>The programming error is to not use printf("%s", buffer).&amp;nbsp; The attacker can exploit the code above by adding format specifiers to input variable.&amp;nbsp;&amp;nbsp; If the buffer contains the "%n" string the application is very likely to crash.&amp;nbsp; Using this string an attacker can start a denial of service attack.&amp;nbsp; </p>
  <p>Functions that copy a string to another like sprint() are even more dangerous.&amp;nbsp; For instance, below&amp;nbsp; the first sprint copies input to buffer setting allowing maximum eight characters to be copied:</p>
  <pre>void func(char * input) {&amp;nbsp;<br />char&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; buffer[16];<br />char&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; message[16];<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sprintf (buffer, "Name: %.8s", input);<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sprintf (message, buffer);<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; printf(message);&amp;nbsp;<br />}&amp;nbsp;</pre>
  <p>If an attacker feeds a large string of A's then the message is properly managed:</p>
  <pre>"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"&amp;nbsp;&amp;nbsp; </pre>
  <p>outputs the following string:</p>
  <pre>"Name: AAAAAAAA"</pre>
  <p>But when the attacker inserts format string characters to the input string the result is a buffer overrun:</p>
  <pre>"%.30dAAAAAAAAAAAAAAA"</pre>
  <p>The %.30d allocates a thirty character string and then appends A's at the end of it.&amp;nbsp; When doing the second copy, the buffer overruns the message and EIP ends of being x41414141.&amp;nbsp; This bug can be used to gain control of the application's execution and run arbitrary code.</p>
  <pre>"%.30d&lt;payload code&gt;"</pre>
  <p>Inside of the payload code placeholder in the above, the attacker can insert executable code to run malicious commands that execute with the privileges of the attacked program, similar to buffer overflow attacks.&amp;nbsp; These commands can include installing a Trojan, opening a remote shell, and propagating a worm, among others.</p>
  <p>Format string bugs can also lead to information disclosure attacks as when the getting debug information using the %x tag or to execute repudiation attacks.&amp;nbsp;&amp;nbsp;</p>
  <p>
    <b>Step 2: List High Risk Components and Entry Points</b>
  </p>
  <p>
    <b>
      <i>Identify high risk components</i>
    </b>
  </p>
  <p>The next step in format string vulnerability testing is to identify all uses of the family of format string API's.&amp;nbsp; When having access to the code, this task can be done as a quick code review or using string searches over the source code directories.&amp;nbsp; If no access to the code is given, then use black box approaches such as API monitoring, network sniffing, and debugging to isolate the binary components or design modules that use these functions.</p>
  <p>The following C functions are vulnerable to this bug:</p>
  <ul>
    <li>printf </li>
    <li>wprintf </li>
    <li>sprintf </li>
    <li>swprintf </li>
    <li>fprintf </li>
    <li>fwprintf </li>
    <li>vprintf </li>
    <li>scanf </li>
    <li>fscanf </li>
    <li>sscanf </li>
    <li>fwscanf </li>
    <li>wscanf </li>
    <li>swscanf </li>
    <li>snprintf</li>
  </ul>
  <p />
  <p>Win32 also provides a set of replacement printf() functions such as:</p>
  <ul>
    <li>StringCbPrintf </li>
    <li>StringCbPrintfEx </li>
    <li>StringCchPrintf&amp;nbsp;</li>
  </ul>
  <p>Perl is also vulnerable to format strings through these functions in particular</p>
  <ul>
    <li>printf </li>
    <li>sprintf&amp;nbsp;</li>
  </ul>
  <p>
    <b>Note:</b> This list doesn't contain all format string functions.&amp;nbsp; There are many more functions that take a format string as an argument, including a large number of functions who's primary purpose is something separate, even though they still invoke a sprintf-like function along the way.&amp;nbsp; Always check the latest programming library documentation for your platform to properly cover all format strings issues.&amp;nbsp;&amp;nbsp; Different versions of C (Unix vs. Microsoft for instance) have different format string functions.&amp;nbsp; Make sure to look at the documentation for all variants of format string manipulation functions. </p>
  <p>
    <b>
      <i>Match high risk components with entry points</i>
    </b>
  </p>
  <p>After listing all the high risk modules, examine all the ways in which you can bass format data to the high risk components.&amp;nbsp; This is similar to walking all paths from each high risk component back to the attacker; each path is an entry point.&amp;nbsp; Common entry points for format string components include:</p>
  <ul>
    <li>User Interface </li>
    <li>API parameters </li>
    <li>Network packets </li>
    <li>File contents </li>
    <li>Memory sections </li>
    <li>Registry keys and values </li>
    <li>URL contents </li>
    <li>IPC Pipes </li>
    <li>Database queries</li>
  </ul>
  <p>Every component using format string functions gathers its input from entry points like the ones above.&amp;nbsp; Make a relation of all the high risk components identified with their entry points during this step.&amp;nbsp;</p>
  <p>
    <b>Step 3:&amp;nbsp; Start Testing and Exploring</b>
  </p>
  <p>During this step start testing the application with common attack vectors and watch the application reaction to them.</p>
  <p>
    <b>
      <i>Attach a debugger</i>
    </b>
  </p>
  <p>Attaching a debugger is a basic task in testing for format strings.&amp;nbsp; Any crash in the application due to access violations will break into the debugger.&amp;nbsp; The tester can then use debug information to determine if the crashes are exploitable such as buffer or heap overflows.<u></u></p>
  <p>
    <b>
      <i>Start with simple fuzz strings</i>
    </b>
  </p>
  <p>The next step is to start testing with basic strings and observe how the application reacts to them.&amp;nbsp;&amp;nbsp; The next string can yield in a crash very fast:</p>
  <pre>%n%s</pre>
  <p>Feed the above string to the application and look for a crash in the debugger.&amp;nbsp; Then keep trying basic fuzz strings are look both at the debugger and at the application's output (message box, UI, web page, etc) depending on the case.&amp;nbsp; Look at the output when testing %x since it may divulge memory locations.&amp;nbsp; Look at the debugger when testing strings expansions such as %128d.</p>
  <p>
    <b>
      <i>Continue with common fuzz vectors</i>
    </b>
  </p>
  <p>Continue exploring different flags passed to format string functions.&amp;nbsp;&amp;nbsp;The OWASP fuzz vectors show&amp;nbsp;a comprehensive list of what to try first:</p>
  <ul>
    <li>%s%p%x%d </li>
    <li>.1024d </li>
    <li>%.2049d </li>
    <li>%p%p%p%p </li>
    <li>%x%x%x%x </li>
    <li>%d%d%d%d </li>
    <li>%s%s%s%s </li>
    <li>%99999999999s </li>
    <li>%08x </li>
    <li>%%20d </li>
    <li>%%20n </li>
    <li>%%20x </li>
    <li>%%20s </li>
    <li>%s%s%s%s%s%s%s%s%s%s </li>
    <li>%p%p%p%p%p%p%p%p%p%p </li>
    <li>%#0123456x%08x%x%s%p%d%n%o%u%c%h%l%q%j%z%Z%t%i%e%g%f%a%C%S%08x%% </li>
    <li>%s x 129 </li>
    <li>%x x 257</li>
  </ul>
  <p>To learn more about&amp;nbsp;the OWASP fuzz vectors, see "OWASP Testing Guide Appendix C: Fuzz Vectors"&amp;nbsp;at <a href="http://www.owasp.org/index.php/OWASP_Testing_Guide_Appendix_C:_Fuzz_Vectors">http://www.owasp.org/index.php/OWASP_Testing_Guide_Appendix_C:_Fuzz_Vectors</a>.</p>
  <p>
    <b>Step 4:&amp;nbsp;&amp;nbsp; Tune test case data</b>
  </p>
  <p>
    <b>
      <i>Modify test data according its entry points</i>
    </b>
  </p>
  <p>The next step is to continue modifying test strings based on each of the entry points.&amp;nbsp; For example, if the application receives strings from a file it is necessary to modify the string values of a file.&amp;nbsp; </p>
  <p>The hex editor shows that the machine name "BOX 01" is stored at offset 164 and in UNICODE (zeros in between).&amp;nbsp; Therefore to test the %n string tune it to look like the one below (hex Unicode) and insert it at this offset:</p>
  <pre>\x25\x00\x6E\x00</pre>
  <p>Another example of data tuning is it is going through the URL.&amp;nbsp; If your application uses the URL to get the variable name then pass the following string to it:</p>
  <pre>http://www.xvulnerablesite.com/input.php?name=%25n<p /></pre>
  <p />
  <p>
    <b>
      <i>Try different payloads:</i>
    </b>
  </p>
  <p>There are different payloads depending on what the attacker might want to do.&amp;nbsp;&amp;nbsp; Next are some examples of additional payloads:</p>
  <p>
    <i>Denial of service due to crash. -&amp;nbsp; </i>passing strings such as these to vulnerable system leads to a crash almost always:</p>
  <ul>
    <li>%n </li>
    <li>%s </li>
    <li>%1024d</li>
  </ul>
  <p>
    <i>Denial of service due to memory consumption. -&amp;nbsp; </i>passing the string below causes the application to allocate an extremely long string and consume excessive memory:</p>
  <pre>%9999999s</pre>
  <p>
    <i>Denial of service due to integer overflow. - </i>&amp;nbsp;passing a float type in a string can cause a nearby integer to be affected:</p>
  <pre>%.650f </pre>
  <p>
    <i>Information disclosure from the stack:</i> - <i>passing</i> the following strings reveal the pointer location and stack:</p>
  <ul>
    <li>%p </li>
    <li>%x%x%x%x</li>
  </ul>
  <p>To learn more about Format String Vulnerabilities in PERL programs, see <a href="http://seclists.org/bugtraq/2005/Dec/0030.html">http://seclists.org/bugtraq/2005/Dec/0030.html</a>.</p>
  <h1>Conclusions</h1>
  <p>Testing for format string bugs is straight forward.&amp;nbsp; An important step is to identify well all entry points to format strings and test through them.&amp;nbsp; Then tune test cases based on entry point and payload to execute.&amp;nbsp; Pay attention to how the application reacts to each test case using the debugger, system and network monitoring tools, and the output and behavior of the application under test.</p>
  <h1>Additional Resources&amp;nbsp;</h1>
  <ul>
    <li>OWASP Testing Guide Appendix C: Fuzz Vectors. <a href="http://www.owasp.org/index.php/OWASP_Testing_Guide_Appendix_C:_Fuzz_Vectors">http://www.owasp.org/index.php/OWASP_Testing_Guide_Appendix_C:_Fuzz_Vectors</a></li>
    <li>Format String Vulnerabilities in PERL programs.&amp;nbsp; Steve Christey.&amp;nbsp; Insecure.org (<a href="http://seclists.org/bugtraq/2005/Dec/0030.html">http://seclists.org/bugtraq/2005/Dec/0030.html</a>)</li>
  </ul>
  <ul>
  </ul>]]></Data>
  </Content>
</TeamMentor_Article>