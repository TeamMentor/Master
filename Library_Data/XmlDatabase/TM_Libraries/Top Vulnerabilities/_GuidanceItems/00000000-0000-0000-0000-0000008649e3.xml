<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>00000000-0000-0000-0000-0000008649e3</Id>
    <Library_Id>f798e6e6-1732-4172-9c47-9621d914efcd</Library_Id>
    <Title>Encode Output Data</Title>
    <Category>Encoding</Category>
    <Phase>Implementation</Phase>
    <Technology> Any</Technology>
    <Type>Principle</Type>
    <DirectLink>Encode Output Data</DirectLink>
    <Author />
    <Priority />
    <Status />
  </Metadata>
  <Content Sanitized="false" DataType="WikiText">
    <Data><![CDATA[==What to Do==

Understand the context in which your data will be used and the encoding that will be expected. This is especially important when transmitting data between different components, or when generating outputs that can contain multiple encodings at the same time, such as web pages or multi-part mail messages. Study all expected communication protocols and data representations to determine the required encoding strategies.

For any data that will be output to another web page, especially any data that was received from external inputs, use the appropriate encoding on all non-alphanumeric characters. Parts of the same output document may require different encodings, which will vary depending on whether the output is in the:

*HTML body
*Element attributes (such as src="XYZ")
*URIs
*JavaScript sections
*Cascading Style Sheets and style properties
*etc.

**Note:** HTML Entity Encoding is only appropriate for the HTML body. Consult the XSS Prevention Cheat Sheet for more details on the types of encoding and escaping that are needed.

==Why==

Proper encoding of echoed input prevents cross-site scripting attacks.

==When==

If user input will be echoed back to the client in any way, encode it before displaying it. This includes input that is immediately echoed back as well as input that is stored first (such as in a database) before being echoed back later.

==How==

To escape HTML characters in user input:

# **Identify all echoed input.** Locate all places inside your application where user-supplied data will be returned to the client. Such data can be of a reflective or persistent nature. In a reflective setting, the input is immediately returned to the client. For example, search engines present the searched query when displaying the results. In a persistent setting, the input is stored and returned to the client when retrieved from the database. For example, message boards store the users' posts inside a database and return them when a given topic is viewed.
# **Determine the type of encoding.** After identifying all echoed input, determine how the input is returned to the client. Data is said to be in a HTML context when that data is rendered as a part of a HTML document and is understood by the browser to be HTML. There are other contexts available to Web Applications, such as JavaScript context, CSS context, etc. Data is said to be in a JavaScript context when it is included in JavaScript code and is interpreted as JavaScript by the browser, and so on. Data has to be encoded differently for different contexts to prevent Cross-Site Scripting vulnerabilities. The differences of encoding arise from the fact that different contexts have different special symbols and keywords. Output encoding routines have to be designed with the understanding of the context of the output in mind.
## **URL encoding:** URL encoding allows your application to maintain the original URL, yet display it to the user in a non-malicious way. Because HTTP headers allow a substitution schema, all characters/symbols are preserved by displaying their ASCII codes instead of the actual character/symbol.
## **HTML encoding:** HTML encoding is used when the echoed input is returned as regular text or HTML content. Input should be encoded by substituting certain characters with their respective HTML values
## **HTML Attribute Encoding:** HTML Attribute encoding is used to encode dynamic data that is output in an attribute of an HTML tag, except URL, CSS, and JavaScript event handler attributes.
## **JavaScript Encoding:** JavaScript encoding is used to encode dynamic data that is output into the JavaScript context, including certain event handlers in HTML tags.
## **CSS Encoding:** CSS encoding is used to encode dynamic data that is output into the CSS context.
## **DOM Encoding:** DOM encoding is used to encode dynamic data that is used in situations where the DOM is involved. These instances are more complicated and often involve multiple output contexts, which necessitates chaining in many circumstances.
# **Apply the encoding.** After identifying the echoed input and determining the appropriate encoding method, apply the encoding before the input is returned to the client. There are different encoding libraries available. Different libraries have different capabilities and weaknesses. Please refer to the vendor's documentation for each potential encoding library.

==Additional Resources==
*For the XSS Prevention Cheat Sheet, please see https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet]]></Data>
  </Content>
</TeamMentor_Article>