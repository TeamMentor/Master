<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>00000000-0000-0000-0000-0000001fdc3e</Id>
    <Library_Id>f215ceee-9a08-41d9-b2c1-bbcc058a8f32</Library_Id>
    <Title>Self-signed SSL Certificates Are Disabled</Title>
    <Category>Communication Security</Category>
    <Phase>Implementation</Phase>
    <Technology>Android</Technology>
    <Type>Checklist Item</Type>
    <DirectLink>Self-signed SSL Certificates Are Disabled</DirectLink>
    <Author />
    <Priority />
    <Status />
  </Metadata>
  <Content Sanitized="false" DataType="WikiText">
    <Data><![CDATA[==Applies To==

* Android applications that send or receive sensitive data over the network.

==What to Check For==

Verify that self-signed SSL certificates are disabled.

==Why==

Allowing the use of self-signed SSL certificates enables some types of man-in-the-middle attacks.

==How to Check==

Self-signed SSL certificates are disabled on Android by default. To verify that self-signed SSL certificates are disabled:

# **Search for code that allows self-signed SSL certificates.** Search application code for the presence of the //setDefaultHostnameVerifier// method call - the presence of this method call indicates that self-signed SSL certificates may be allowed.
# **Verify that self-signed SSL certificates are not allowed in production releases.** If self-signed SSL certificates are allowed for development purposes, make sure that they are disabled in production releases. The recommended way to disable development code in production releases is by using //#define// and //#ifdef// compiler directives.

==How to Fix==

Self-signed SSL certificates are disabled on Android by default. Do not allow them in production releases.

==Related Items==
]]></Data>
  </Content>
</TeamMentor_Article>