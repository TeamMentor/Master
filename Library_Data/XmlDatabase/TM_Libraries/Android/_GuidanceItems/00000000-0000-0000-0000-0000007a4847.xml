<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>00000000-0000-0000-0000-0000007a4847</Id>
    <Library_Id>f215ceee-9a08-41d9-b2c1-bbcc058a8f32</Library_Id>
    <Title>Native Code Is Not Used Unless Necessary</Title>
    <Category>Memory Management</Category>
    <Phase>Implementation</Phase>
    <Technology>Android</Technology>
    <Type>Checklist Item</Type>
    <DirectLink>Native Code Is Not Used Unless Necessary</DirectLink>
    <Author />
    <Priority />
    <Status />
  </Metadata>
  <Content Sanitized="false" DataType="WikiText">
    <Data><![CDATA[==What to Check For==

Verify that native code is not used unless necessary.

==Why==

Using native code increases the risk of memory management vulnerabilities, such as buffer overflows and format string vulnerabilities.

==How to Check==

Examine application source code files to detect any code that is not written in Java. Java files typically have //.java// file extensions and C files usually have //.c// file extensions. The presence of file names ending with //.c// indicates that native code is present.

==How to Fix==

Examine the application architecture and identify any native code components. Consider replacing any native code components with Java equivalents. One reason to keep native code components is if they carry out simple but performance-sensitive operations. Avoid using native code in the future. Weigh the risks of additional vulnerabilities against the performance benefits when considering using native code.

==Related Items==
]]></Data>
  </Content>
</TeamMentor_Article>