<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="852522635" Content_Hash="1900765358">
  <Metadata>
    <Id>275e5831-738a-44de-997b-f79d97039027</Id>
    <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
    <Title>All Output Data Is Encoded</Title>
    <Category>Input and Data Validation</Category>
    <Phase>Implementation</Phase>
    <Technology>Java</Technology>
    <Type>Checklist Item</Type>
    <DirectLink>All Output Data Is Encoded</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>1</Priority>
    <Status />
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>What to Check For</h1>
  <p>Ensure that all echoed input is first encoded.</p>
  <h1>Why</h1>
  <p>Encoding echoed input prevents injection attacks such as cross-site scripting.</p>
  <h1>How to Check</h1>
  <p>An application can take input via various&amp;nbsp;sources, such as a web interface, database, file system or other software running on the server, and then use that same input in various outputs. Use the following steps to establish a validation strategy:</p>
  <ol>
    <li>
      <p>
        <strong>Identify all sources of input. </strong>At design time identify all potential sources of input to your application. Once implemented, scour source code to discover sources of input that may have been missed in the design. Potential sources of input in a web application typically include:</p>
      <ul>
        <li>URL based parameters </li>
        <li>Form based parameters </li>
        <li>Hidden fields </li>
        <li>Cookies </li>
        <li>HTTP headers (Host, accept types, www authentication, cache settings, encodings, etc) </li>
        <li>Local filesystem </li>
        <li>Database </li>
        <li>Other services running on the system </li>
        <li>Javascript variables </li>
        <li>File upload and attributes (filename, size, data, etc) </li>
        <li>DNS results or host names </li>
        <li>External component call return values (COM, AJAX, ActiveX) </li>
      </ul>
      <p>Once you&amp;nbsp;have listed the sources of input your application&amp;nbsp;can use, look for all entry points. Good starting points are method parameters and assignment statements. For example: </p>
      <p>This method uses the <em>searchTerm</em> variable.</p>
      <pre>void aggregateData(PrintWriter out, String searchTerm)<br /> ...<br /><br />double[] rData = common.queryDBForIndex(searchTerm);</pre>
      <p>This assignment stores data from a <em>GET</em> request parameter named <em>index</em> and stores it in the string <em>searchTerm</em>. Ensure that this input is validated.</p>
      <pre>String searchTerm = request.getParameter("index");</pre>
      <p>This assignment uses the input that was gathered above to store more input from a database. Verify that <em>searchTerm</em> is validated before this use, and also ensure that <em>rData</em> is validated as another source of input.</p>
      <pre>double[] rData = common.queryDBForIndex(searchTerm);</pre>
    </li>
    <li>
      <p>
        <strong>Trace data from source to sink. </strong>Trace each source of input from the immediate source, through your application, to its final destination. The final sink may be in memory, on the hard drive, sent over the network or stored in a data store such as a database. Create a list of the input sources that are echoed back to the user through output - whether directly, through a file, in a URL or through a database or other intermediary source.</p>
      <p>Input used as output may be identified by the following:</p>
      <ul>
        <li>out.println() </li>
        <li>append() </li>
        <li>insert() </li>
        <li>write() </li>
        <li>Assignment operator (=) </li>
        <li>Increment and assignment operator (+=) </li>
        <li>Database write operations</li>
      </ul>
    </li>
    <li>
      <span>
        <p>
          <strong>Ensure input is properly encoded before being used as output</strong>. Each of the input sources identified above should have the input encoded properly before it is used as output. Encoding must be selected appropriately based upon how the output is returned to the client. Verify the context in which the output is used and ensure it is properly encoded. A couple example contexts are shown below (URL, HTML entity)</p>
      </span>
      <ul>
        <li>URL Encoding- <em>URLEncoder.encode(output)</em></li>
        <li>HTML Entity Encoding&amp;nbsp;- JSP HTML encoding: <em>&lt;c:out value="${output}" /&gt;</em></li>
        <li>
          <span>HTML Attribute Encoding</span>
        </li>
        <li>
          <span>JavaScript Encoding</span>
        </li>
        <li>
          <span>CSS Encoding</span>
        </li>
        <li>
          <span>DOM Encoding</span>
        </li>
      </ul>
      <span>
        <p>Beware that certain locations may require a mixed encoding, such as initially performing URL encoding, then performing JavaScript encoding. This depends entirely on the output context wherein the data is used, and requires knowledge of the parsing mechanisms of browsers. Some example encodings are below.</p>
      </span>
      <p />User URL provided: <pre>http://server/form?x=<strong>"&gt;&lt;SCRIPT&gt;alert('XSS');&lt;/SCRIPT&gt;</strong></pre><p>No encoding:</p><pre>&lt;form action="http://server/form?x=<strong>"&gt;&lt;SCRIPT&gt;alert('XSS');&lt;/SCRIPT&gt;</strong>"&gt;</pre><p>URL Encoding:</p><pre>&lt;form action="http://server/form%3Fx%3D<strong>%22%3E%3CSCRIPT%3Ealert%28%27XSS%27%29%3B%3C/SCRIPT%3E</strong>"&gt;</pre><p>HTML Encoding:</p><pre>&lt;form action="http://server/form?x=<strong>"&lt;&lt;SCRIPT&lt;alert('XSS');&lt;/SCRIPT&lt;</strong>"&gt;</pre></li>
  </ol>
  <h1>How to Fix</h1>
  <p>Encoding the echoed user input prevents injection attacks such as cross-site scripting. Use the following steps to ensure all echoed input is encoded:</p>
  <ol>
    <li>
      <p>
        <strong>Identify all echoed input. </strong>Locate all places inside your application where user-supplied data will be returned to the client. Such data can be of a reflective or persistent nature:</p>
      <ul>
        <li>
          <strong>Reflective</strong>: In a reflective setting, the input is immediately returned to the client. For example, search engines present the searched query when displaying the results. </li>
        <li>
          <strong>Persistent</strong>: In a persistent setting, the input is stored and returned to the client when retrieved from the database. For example, message boards store the users' posts inside a database and return them when a given topic is viewed.</li>
      </ul>
    </li>
    <li>
      <p>
        <strong>Determine the&amp;nbsp;type of encoding. </strong>After identifying all echoed input, determine how the input is returned to client. Data is said to be in a HTML context when that data is rendered as a part of a HTML document and is understood by the browser to be HTML. There are other contexts available to Web Applications, such as JavaScript context, CSS context, etc. Data is said to be in a JavaScript context when it is included in JavaScript code and is interpreted as JavaScript by the browser, and so on. Data has to be encoded differently for different contexts to prevent Cross-Site Scripting vulnerabilities. The differences of encoding arise from the fact that different contexts have different special symbols and keywords. Output encoding routines have to be designed with the understanding of the context of the output in mind.</p>
      <ul>
        <li>
          <p>
            <strong>URL encoding</strong>: URL encoding allows your application to maintain the original URL, yet display it to the user in a non-malicious way. Because HTTP headers allow a substitution schema, all characters/symbols are preserved by displaying their ASCII codes instead of the actual character/symbol. For example, <em>&lt;</em> is represented by <em>%3C</em> where <em>3C</em> is the ASCII value for <em>&lt;</em>:</p>
          <pre>String encodedUrl = URLEncoder.encode(url);</pre>
        </li>
        <li>
          <p>
            <strong>HTML encoding</strong>: HTML encoding is used when the echoed input is returned as regular text or HTML content. Input should be encoded by substituting certain characters with their respective HTML entities.</p>
          <blockquote>
          </blockquote>
        </li>
        <li>
          <p>
            <strong>HTML Attribute Encoding</strong>: HTML Attribute encoding is used to encode dynamic data that is output in an attribute of an HTML tag, except&amp;nbsp;URL, CSS, and JavaScript event handler attributes.</p>
        </li>
        <li>
          <p>
            <strong>JavaScript Encoding</strong>: JavaScript encoding is used to encode dynamic data that is output into the JavaScript context, including certain event handlers in HTML tags.</p>
        </li>
        <li>
          <p>
            <strong>CSS Encoding</strong>: CSS encoding is used to encode dynamic data that is output into the CSS context.</p>
        </li>
        <li>
          <p>
            <strong>DOM Encoding</strong>: DOM encoding is used to encode dynamic data that is used in situations where the DOM is involved. These instances are more complicated and often involve multiple output contexts, which necessitates chaining in many circumstances.</p>
        </li>
      </ul>
    </li>
    <li>
      <p>
        <strong>Apply the encoding. </strong>After identifying the echoed input and determining the appropriate encoding method, apply the encoding before the input is returned to the client. There are different encoding libraries available. Different libraries have different capabilities and weaknesses. Please, refer to the vendor's documentation for each potential encoding library.</p>
    </li>
  </ol>
  <h1>Problem Example</h1>
  <p>The following code produces a data analysis based on a financial index. Because it does not HTML encode the echoed input, the application is vulnerable to reflective cross-site scripting.</p>
  <pre>import java.io.*;<br />import java.util.*;<br />import java.lang.*;<br />import javax.servlet.*;<br />import javax.servlet.http.*;<br />import java.util.regex.*;<br /><br /><br />public final class DataAggregator extends HttpServlet<br />{<br />      public void doGet(HttpServletRequest request, HttpServletResponse response)<br />            throws ServletException, IOException<br />      {<br />            PrintWriter out = response.getWriter();<br />            String searchTerm = request.getParameter("index");<br /><br />            try<br />            {<br />                  if (validateSearchTerm(searchTerm))<br />                  {<br />                        String retString;<br /><br />                        retString = "The queried index \"";<br /><br />                        // The application does not HTML encode <br />                        //     the returned input<br />                        retString += searchTerm;<br /><br />                        retString += "\" results in:&lt;br&gt; ";<br />                        out.println(retString);<br />                        common.aggregateData(out, searchTerm);<br />                  }<br />                  else<br />                  {<br />                        // Add appropriate logging and exception handling<br />                        // mechanisms. Consult the Exception Handling and<br />                        // Logging sections<br />                        out.println("Unable to process at the moment."<br />                                 + " Please try again later.");<br />                  }<br />            }<br /><br />            catch (Exception e)<br />            {<br />                  // Add the appropriate logging and exception handling<br />                  // mechanisms. Consult the Exception Handling<br />                  // and Logging sections<br /><br />                  out.println("Unable to process at the moment."<br />                           + " Please try again later.");<br />            }<br /><br />            out.flush();<br />            out.close();<br />      }<br />}</pre>
  <h1>Solution Example</h1>
  <p>The following code produces a data analysis based on a financial index. Because the code HTML encodes the echoed input, it is impossible for an attacker to exploit the application via reflective cross-site scripting.</p>
  <pre>import java.io.*;<br />import java.util.*;<br />import java.lang.*;<br />import javax.servlet.*;<br />import javax.servlet.http.*;<br />import java.util.regex.*;<br /><br />public final class DataAggregator extends HttpServlet<br />{<br />      public void doGet(HttpServletRequest request,HttpServletResponse response)<br />            throws ServletException, IOException<br />      {<br />            PrintWriter out = response.getWriter();<br />            String searchTerm = request.getParameter("index");<br /><br />            try<br />            {<br />                  if (validateSearchTerm(searchTerm))<br />                  {<br />                        String retString;<br /><br />                        retString = "The queried index \"";<br /><br />                        // The application HTML encodes the echoed input<br />                        retString += encodeHtml(searchTerm);<br />                        retString += "\" results in :&lt;br&gt; ";<br />                        out.println(retString);<br />                        common.aggregateData(out, searchTerm);<br />                  }<br />                  else<br />                  {<br />                        // Add the appropriate logging and exception<br />                        // handling mechanisms. Consult the Exception<br />                        // Handling and Logging sections<br />                        out.println("Unable to process at the moment."<br />                                + " Please try again later.");<br />                  }<br />            }<br />            catch (Exception e)<br />            {<br />                  // Add the appropriate logging and exception<br />                  // handling mechanisms. Consult the Exception<br />                  // Handling and Logging sections<br />                  out.println("Unable to process at the moment."<br />                           + " Please try again later.");<br />            }<br /><br />            out.flush();<br />            out.close();<br />      }<br /><br />      public String encodeHtml(String input)<br />      {<br />            StringBuffer out = new StringBuffer();<br /><br />            for (int i = 0; i &lt; input.length(); i++)<br />            {<br />                  char c = input.charAt(i);<br />                  if (c == '&lt;')<br />                  {<br />                        out.append("&lt;");<br />                  }<br />                  else if (c == '&gt;')<br />                  {<br />                        out.append("&gt;");<br />                  }<br />                  else if (c == '\"')<br />                  {<br />                        out.append(""");<br />                  }<br />                  else if (c == '\'')<br />                  {<br />                        out.append(""");<br />                  }<br />                  else if (c == '&amp;')<br />                  {<br />                        out.append("&amp;");<br />                  }<br />                  else if (c &gt; 0x20 &amp;&amp; c &lt; 0x126)<br />                  {<br />                        out.append(c);<br />                  }<br />                  else<br />                  {<br />                        out.append("&amp;#" + (int)c + ";");<br />                  }<br />            }<br />             return out.toString();<br />      }<br />}</pre>
  <h1>Additional Resources</h1>
  <ul>
    <li>To learn more about cross-site scripting, including a library to help defend against cross-site scripting attacks, see: <a href="http://www-128.ibm.com/developerworks/tivoli/library/s-csscript/">Cross-site scripting</a>. </li>
    <li>To learn more about cross-site scripting, see: <a href="http://today.java.net/pub/a/today/2005/09/20/handling-web-app-input.html">Handling Java Web Application Input, Part 2</a>. </li>
  </ul>]]></Data>
  </Content>
</TeamMentor_Article>